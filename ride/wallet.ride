{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func deposit() = {
  let pmt =
    if i.payments.size() == 1 then
      i.payments[0]
    else
      throw("invalid payments")
  if (isDefined(pmt.assetId)) then
    throw("can hodl waves only at the moment")
  else {
    let currentKey    = toBase58String(i.caller.bytes)
    let currentAmount = match getInteger(this, currentKey) {
      case a: Int => a
      case _      => 0
    }
    let newAmount = currentAmount + pmt.amount
    ( [ IntegerEntry(currentKey, newAmount) ], unit )
  }
}

@Callable(i)
func withdraw(amount: Int) = {
  let currentKey    = toBase58String(i.caller.bytes) 
  let currentAmount = match getInteger(this, currentKey) {
    case a: Int => a
    case _      => 0
  }
  let newAmount = currentAmount - amount
  if (amount < 0) then
    throw("Can't withdraw negative amount")
  else if (newAmount < 0) then
    throw("Not enough balance")
  else
    ( [ IntegerEntry(currentKey, newAmount),
        ScriptTransfer(i.caller, amount, unit) ],
      unit)
}

@Verifier(tx)
func verify() = false
